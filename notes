TypeScript

- statically typed (declare types)
- camelCase
- $ tsc filename.ts (converts to JS)
- Config file (tsconfig.json):
    {
      "compilerOptions": {
        "sourceMap": true
      },
      "files": [
        "hello_typescript.ts" <-- add files here
      ]
    }
- $ tsc (compiles files listed in config)
- $ node hello_typescript (shows output)
- var, let, const
  - var fullName : string = "James Padilla"; (you can redeclare 'var', but don't change the type)
  - let userAdmin : boolean = true; (you can't redeclare 'let' the same way, unlike var -- but you can reassign)
  - const versionNumber : number = 1.3; (constant, this value does not change)
- string interpolation: "hey ${variableName}. nice to meet you."
- tuple (collection)
- enum (states)
- function returns type of number: function generateAge (//stuff) : number {//stuff}
- optional arg: (middleName?: string)
- default arg: (planet = 'earth')
- rest: (...players: string[]) (converts string args to array)
- function declarations can be run before they are defined (hoisting), function expressions cannot
  - Has to do with asynchronous behavior
- for in vs for of
  - for in acts as an index/counter
  - for of acts as an each loop
- closures very object-like

Workflow
  - Create/Open ts file
  - Add/edit code
  - tsc (compiles to js)
  - node filename-you-made (no extension; runs the js)

Setup Notes
  - Homebrew good for managing dependencies (over manual installation)
  - Initial Setup:
    - brew install node
    - node -v
    - npm -v
    - npm install -g typescript
